<class> 
<keyword> class </keyword> 
<identifier> Square </identifier> 
<symbol> { </symbol> 
<classVarDec> 
<keyword> field </keyword> 
<keyword> int </keyword> 
<identifier> x </identifier> 
<symbol> , </symbol> 
<identifier> y </identifier> 
<symbol> ; </symbol> 
</classVarDec> 
<classVarDec> 
<keyword> field </keyword> 
<keyword> int </keyword> 
<identifier> size </identifier> 
<symbol> ; </symbol> 
</classVarDec> 
<subroutineDec> 
<keyword> constructor </keyword> 
<identifier> Square </identifier> 
<identifier> new </identifier> 
<symbol> ( </symbol> 
<parameterList> 
<keyword> int </keyword> 
<identifier> Ax </identifier> 
<symbol> , </symbol> 
<keyword> int </keyword> 
<identifier> Ay </identifier> 
<symbol> , </symbol> 
<keyword> int </keyword> 
<identifier> Asize </identifier> 
</parameterList> 
<symbol> ) </symbol> 
<subroutineBody> 
<symbol> { </symbol> 
<statements> 
<letStatement> 
<keyword> let </keyword> 
<identifier> x </identifier> 
<symbol> = </symbol> 
<expression> 
</expression> 
<identifier> Ax </identifier> 
</letStatement> 
</statements> 
<symbol> ; </symbol> 
</subroutineBody> 
</subroutineDec> 
<keyword> let </keyword> 
</class> 
<identifier> y </identifier> 
<symbol> = </symbol> 
<identifier> Ay </identifier> 
<symbol> ; </symbol> 
<letStatement> 
<keyword> let </keyword> 
<identifier> size </identifier> 
<symbol> = </symbol> 
<expression> 
</expression> 
<identifier> Asize </identifier> 
</letStatement> 
<symbol> ; </symbol> 
<doStatement> 
<keyword> do </keyword> 
<identifier> draw </identifier> 
<symbol> ( </symbol> 
<expressionList> 
</expressionList> 
<symbol> ) </symbol> 
<symbol> ; </symbol> 
</doStatement> 
<returnStatement> 
<keyword> return </keyword> 
<expression> 
</expression> 
<keyword> this </keyword> 
</returnStatement> 
<symbol> ; </symbol> 
<symbol> } </symbol> 
<subroutineDec> 
<keyword> method </keyword> 
<keyword> void </keyword> 
<identifier> dispose </identifier> 
<symbol> ( </symbol> 
<parameterList> 
</parameterList> 
<symbol> ) </symbol> 
<subroutineBody> 
<symbol> { </symbol> 
<statements> 
<doStatement> 
<keyword> do </keyword> 
<identifier> Memory </identifier> 
<symbol> . </symbol> 
<identifier> deAlloc </identifier> 
<symbol> ( </symbol> 
<expressionList> 
<expression> 
</expression> 
<keyword> this </keyword> 
<expression> 
</expression> 
</expressionList> 
<symbol> ) </symbol> 
<symbol> ; </symbol> 
</doStatement> 
<returnStatement> 
<keyword> return </keyword> 
<symbol> ; </symbol> 
</returnStatement> 
</statements> 
<symbol> } </symbol> 
</subroutineBody> 
</subroutineDec> 
<subroutineDec> 
<keyword> method </keyword> 
<keyword> void </keyword> 
<identifier> draw </identifier> 
<symbol> ( </symbol> 
<parameterList> 
</parameterList> 
<symbol> ) </symbol> 
<subroutineBody> 
<symbol> { </symbol> 
<statements> 
<doStatement> 
<keyword> do </keyword> 
<identifier> Screen </identifier> 
<symbol> . </symbol> 
<identifier> setColor </identifier> 
<symbol> ( </symbol> 
<expressionList> 
<expression> 
</expression> 
<keyword> true </keyword> 
<expression> 
</expression> 
</expressionList> 
<symbol> ) </symbol> 
<symbol> ; </symbol> 
</doStatement> 
<doStatement> 
<keyword> do </keyword> 
<identifier> Screen </identifier> 
<symbol> . </symbol> 
<identifier> drawRectangle </identifier> 
<symbol> ( </symbol> 
<expressionList> 
<expression> 
</expression> 
<identifier> x </identifier> 
<expression> 
</expression> 
<symbol> , </symbol> 
<expression> 
</expression> 
<identifier> y </identifier> 
<expression> 
</expression> 
<symbol> , </symbol> 
<expression> 
</expression> 
<identifier> x </identifier> 
<expression> 
<symbol> + </symbol> 
</expression> 
<identifier> size </identifier> 
<expression> 
</expression> 
<symbol> , </symbol> 
<expression> 
</expression> 
<identifier> y </identifier> 
<expression> 
<symbol> + </symbol> 
</expression> 
<identifier> size </identifier> 
<expression> 
</expression> 
</expressionList> 
<symbol> ) </symbol> 
<symbol> ; </symbol> 
</doStatement> 
<returnStatement> 
<keyword> return </keyword> 
<symbol> ; </symbol> 
</returnStatement> 
</statements> 
<symbol> } </symbol> 
</subroutineBody> 
</subroutineDec> 
<subroutineDec> 
<keyword> method </keyword> 
<keyword> void </keyword> 
<identifier> erase </identifier> 
<symbol> ( </symbol> 
<parameterList> 
</parameterList> 
<symbol> ) </symbol> 
<subroutineBody> 
<symbol> { </symbol> 
<statements> 
<doStatement> 
<keyword> do </keyword> 
<identifier> Screen </identifier> 
<symbol> . </symbol> 
<identifier> setColor </identifier> 
<symbol> ( </symbol> 
<expressionList> 
<expression> 
</expression> 
<keyword> false </keyword> 
<expression> 
</expression> 
</expressionList> 
<symbol> ) </symbol> 
<symbol> ; </symbol> 
</doStatement> 
<doStatement> 
<keyword> do </keyword> 
<identifier> Screen </identifier> 
<symbol> . </symbol> 
<identifier> drawRectangle </identifier> 
<symbol> ( </symbol> 
<expressionList> 
<expression> 
</expression> 
<identifier> x </identifier> 
<expression> 
</expression> 
<symbol> , </symbol> 
<expression> 
</expression> 
<identifier> y </identifier> 
<expression> 
</expression> 
<symbol> , </symbol> 
<expression> 
</expression> 
<identifier> x </identifier> 
<expression> 
<symbol> + </symbol> 
</expression> 
<identifier> size </identifier> 
<expression> 
</expression> 
<symbol> , </symbol> 
<expression> 
</expression> 
<identifier> y </identifier> 
<expression> 
<symbol> + </symbol> 
</expression> 
<identifier> size </identifier> 
<expression> 
</expression> 
</expressionList> 
<symbol> ) </symbol> 
<symbol> ; </symbol> 
</doStatement> 
<returnStatement> 
<keyword> return </keyword> 
<symbol> ; </symbol> 
</returnStatement> 
</statements> 
<symbol> } </symbol> 
</subroutineBody> 
</subroutineDec> 
<subroutineDec> 
<keyword> method </keyword> 
<keyword> void </keyword> 
<identifier> incSize </identifier> 
<symbol> ( </symbol> 
<parameterList> 
</parameterList> 
<symbol> ) </symbol> 
<subroutineBody> 
<symbol> { </symbol> 
<statements> 
<ifStatement> 
<keyword> if </keyword> 
<symbol> ( </symbol> 
<expression> 
<symbol> ( </symbol> 
<expression> 
<symbol> ( </symbol> 
<expression> 
</expression> 
</expression> 
</expression> 
<identifier> y </identifier> 
<symbol> + </symbol> 
<statements> 
</statements> 
<identifier> size </identifier> 
</ifStatement> 
</statements> 
<symbol> ) </symbol> 
</subroutineBody> 
</subroutineDec> 
<symbol> &lt; </symbol> 
<integerConstant> 254 </integerConstant> 
<symbol> ) </symbol> 
<symbol> &amp; </symbol> 
<symbol> ( </symbol> 
<symbol> ( </symbol> 
<identifier> x </identifier> 
<symbol> + </symbol> 
<identifier> size </identifier> 
<symbol> ) </symbol> 
<symbol> &lt; </symbol> 
<integerConstant> 510 </integerConstant> 
<symbol> ) </symbol> 
<symbol> ) </symbol> 
<symbol> { </symbol> 
<doStatement> 
<keyword> do </keyword> 
<identifier> erase </identifier> 
<symbol> ( </symbol> 
<expressionList> 
</expressionList> 
<symbol> ) </symbol> 
<symbol> ; </symbol> 
</doStatement> 
<letStatement> 
<keyword> let </keyword> 
<identifier> size </identifier> 
<symbol> = </symbol> 
<expression> 
</expression> 
<identifier> size </identifier> 
</letStatement> 
<symbol> + </symbol> 
<integerConstant> 2 </integerConstant> 
<symbol> ; </symbol> 
<doStatement> 
<keyword> do </keyword> 
<identifier> draw </identifier> 
<symbol> ( </symbol> 
<expressionList> 
</expressionList> 
<symbol> ) </symbol> 
<symbol> ; </symbol> 
</doStatement> 
<symbol> } </symbol> 
<returnStatement> 
<keyword> return </keyword> 
<symbol> ; </symbol> 
</returnStatement> 
<symbol> } </symbol> 
<subroutineDec> 
<keyword> method </keyword> 
<keyword> void </keyword> 
<identifier> decSize </identifier> 
<symbol> ( </symbol> 
<parameterList> 
</parameterList> 
<symbol> ) </symbol> 
<subroutineBody> 
<symbol> { </symbol> 
<statements> 
<ifStatement> 
<keyword> if </keyword> 
<symbol> ( </symbol> 
<expression> 
</expression> 
<identifier> size </identifier> 
<symbol> &gt; </symbol> 
<statements> 
</statements> 
<integerConstant> 2 </integerConstant> 
</ifStatement> 
</statements> 
<symbol> ) </symbol> 
</subroutineBody> 
</subroutineDec> 
<symbol> { </symbol> 
<doStatement> 
<keyword> do </keyword> 
<identifier> erase </identifier> 
<symbol> ( </symbol> 
<expressionList> 
</expressionList> 
<symbol> ) </symbol> 
<symbol> ; </symbol> 
</doStatement> 
<letStatement> 
<keyword> let </keyword> 
<identifier> size </identifier> 
<symbol> = </symbol> 
<expression> 
</expression> 
<identifier> size </identifier> 
</letStatement> 
<symbol> - </symbol> 
<integerConstant> 2 </integerConstant> 
<symbol> ; </symbol> 
<doStatement> 
<keyword> do </keyword> 
<identifier> draw </identifier> 
<symbol> ( </symbol> 
<expressionList> 
</expressionList> 
<symbol> ) </symbol> 
<symbol> ; </symbol> 
</doStatement> 
<symbol> } </symbol> 
<returnStatement> 
<keyword> return </keyword> 
<symbol> ; </symbol> 
</returnStatement> 
<symbol> } </symbol> 
<subroutineDec> 
<keyword> method </keyword> 
<keyword> void </keyword> 
<identifier> moveUp </identifier> 
<symbol> ( </symbol> 
<parameterList> 
</parameterList> 
<symbol> ) </symbol> 
<subroutineBody> 
<symbol> { </symbol> 
<statements> 
<ifStatement> 
<keyword> if </keyword> 
<symbol> ( </symbol> 
<expression> 
</expression> 
<identifier> y </identifier> 
<symbol> &gt; </symbol> 
<statements> 
</statements> 
<integerConstant> 1 </integerConstant> 
</ifStatement> 
</statements> 
<symbol> ) </symbol> 
</subroutineBody> 
</subroutineDec> 
<symbol> { </symbol> 
<doStatement> 
<keyword> do </keyword> 
<identifier> Screen </identifier> 
<symbol> . </symbol> 
<identifier> setColor </identifier> 
<symbol> ( </symbol> 
<expressionList> 
<expression> 
</expression> 
<keyword> false </keyword> 
<expression> 
</expression> 
</expressionList> 
<symbol> ) </symbol> 
<symbol> ; </symbol> 
</doStatement> 
<doStatement> 
<keyword> do </keyword> 
<identifier> Screen </identifier> 
<symbol> . </symbol> 
<identifier> drawRectangle </identifier> 
<symbol> ( </symbol> 
<expressionList> 
<expression> 
</expression> 
<identifier> x </identifier> 
<expression> 
</expression> 
<symbol> , </symbol> 
<expression> 
<symbol> ( </symbol> 
<expression> 
</expression> 
</expression> 
<identifier> y </identifier> 
<expression> 
<symbol> + </symbol> 
</expression> 
<identifier> size </identifier> 
<expression> 
</expression> 
</expressionList> 
<symbol> ) </symbol> 
<symbol> - </symbol> 
</doStatement> 
<integerConstant> 1 </integerConstant> 
<symbol> , </symbol> 
<identifier> x </identifier> 
<symbol> + </symbol> 
<identifier> size </identifier> 
<symbol> , </symbol> 
<identifier> y </identifier> 
<symbol> + </symbol> 
<identifier> size </identifier> 
<symbol> ) </symbol> 
<symbol> ; </symbol> 
<letStatement> 
<keyword> let </keyword> 
<identifier> y </identifier> 
<symbol> = </symbol> 
<expression> 
</expression> 
<identifier> y </identifier> 
</letStatement> 
<symbol> - </symbol> 
<integerConstant> 2 </integerConstant> 
<symbol> ; </symbol> 
<doStatement> 
<keyword> do </keyword> 
<identifier> Screen </identifier> 
<symbol> . </symbol> 
<identifier> setColor </identifier> 
<symbol> ( </symbol> 
<expressionList> 
<expression> 
</expression> 
<keyword> true </keyword> 
<expression> 
</expression> 
</expressionList> 
<symbol> ) </symbol> 
<symbol> ; </symbol> 
</doStatement> 
<doStatement> 
<keyword> do </keyword> 
<identifier> Screen </identifier> 
<symbol> . </symbol> 
<identifier> drawRectangle </identifier> 
<symbol> ( </symbol> 
<expressionList> 
<expression> 
</expression> 
<identifier> x </identifier> 
<expression> 
</expression> 
<symbol> , </symbol> 
<expression> 
</expression> 
<identifier> y </identifier> 
<expression> 
</expression> 
<symbol> , </symbol> 
<expression> 
</expression> 
<identifier> x </identifier> 
<expression> 
<symbol> + </symbol> 
</expression> 
<identifier> size </identifier> 
<expression> 
</expression> 
<symbol> , </symbol> 
<expression> 
</expression> 
<identifier> y </identifier> 
<expression> 
<symbol> + </symbol> 
</expression> 
<integerConstant> 1 </integerConstant> 
<expression> 
</expression> 
</expressionList> 
<symbol> ) </symbol> 
<symbol> ; </symbol> 
</doStatement> 
<symbol> } </symbol> 
<returnStatement> 
<keyword> return </keyword> 
<symbol> ; </symbol> 
</returnStatement> 
<symbol> } </symbol> 
<subroutineDec> 
<keyword> method </keyword> 
<keyword> void </keyword> 
<identifier> moveDown </identifier> 
<symbol> ( </symbol> 
<parameterList> 
</parameterList> 
<symbol> ) </symbol> 
<subroutineBody> 
<symbol> { </symbol> 
<statements> 
<ifStatement> 
<keyword> if </keyword> 
<symbol> ( </symbol> 
<expression> 
<symbol> ( </symbol> 
<expression> 
</expression> 
</expression> 
<identifier> y </identifier> 
<symbol> + </symbol> 
<statements> 
</statements> 
<identifier> size </identifier> 
</ifStatement> 
</statements> 
<symbol> ) </symbol> 
</subroutineBody> 
</subroutineDec> 
<symbol> &lt; </symbol> 
<integerConstant> 254 </integerConstant> 
<symbol> ) </symbol> 
<symbol> { </symbol> 
<doStatement> 
<keyword> do </keyword> 
<identifier> Screen </identifier> 
<symbol> . </symbol> 
<identifier> setColor </identifier> 
<symbol> ( </symbol> 
<expressionList> 
<expression> 
</expression> 
<keyword> false </keyword> 
<expression> 
</expression> 
</expressionList> 
<symbol> ) </symbol> 
<symbol> ; </symbol> 
</doStatement> 
<doStatement> 
<keyword> do </keyword> 
<identifier> Screen </identifier> 
<symbol> . </symbol> 
<identifier> drawRectangle </identifier> 
<symbol> ( </symbol> 
<expressionList> 
<expression> 
</expression> 
<identifier> x </identifier> 
<expression> 
</expression> 
<symbol> , </symbol> 
<expression> 
</expression> 
<identifier> y </identifier> 
<expression> 
</expression> 
<symbol> , </symbol> 
<expression> 
</expression> 
<identifier> x </identifier> 
<expression> 
<symbol> + </symbol> 
</expression> 
<identifier> size </identifier> 
<expression> 
</expression> 
<symbol> , </symbol> 
<expression> 
</expression> 
<identifier> y </identifier> 
<expression> 
<symbol> + </symbol> 
</expression> 
<integerConstant> 1 </integerConstant> 
<expression> 
</expression> 
</expressionList> 
<symbol> ) </symbol> 
<symbol> ; </symbol> 
</doStatement> 
<letStatement> 
<keyword> let </keyword> 
<identifier> y </identifier> 
<symbol> = </symbol> 
<expression> 
</expression> 
<identifier> y </identifier> 
</letStatement> 
<symbol> + </symbol> 
<integerConstant> 2 </integerConstant> 
<symbol> ; </symbol> 
<doStatement> 
<keyword> do </keyword> 
<identifier> Screen </identifier> 
<symbol> . </symbol> 
<identifier> setColor </identifier> 
<symbol> ( </symbol> 
<expressionList> 
<expression> 
</expression> 
<keyword> true </keyword> 
<expression> 
</expression> 
</expressionList> 
<symbol> ) </symbol> 
<symbol> ; </symbol> 
</doStatement> 
<doStatement> 
<keyword> do </keyword> 
<identifier> Screen </identifier> 
<symbol> . </symbol> 
<identifier> drawRectangle </identifier> 
<symbol> ( </symbol> 
<expressionList> 
<expression> 
</expression> 
<identifier> x </identifier> 
<expression> 
</expression> 
<symbol> , </symbol> 
<expression> 
<symbol> ( </symbol> 
<expression> 
</expression> 
</expression> 
<identifier> y </identifier> 
<expression> 
<symbol> + </symbol> 
</expression> 
<identifier> size </identifier> 
<expression> 
</expression> 
</expressionList> 
<symbol> ) </symbol> 
<symbol> - </symbol> 
</doStatement> 
<integerConstant> 1 </integerConstant> 
<symbol> , </symbol> 
<identifier> x </identifier> 
<symbol> + </symbol> 
<identifier> size </identifier> 
<symbol> , </symbol> 
<identifier> y </identifier> 
<symbol> + </symbol> 
<identifier> size </identifier> 
<symbol> ) </symbol> 
<symbol> ; </symbol> 
<symbol> } </symbol> 
<returnStatement> 
<keyword> return </keyword> 
<symbol> ; </symbol> 
</returnStatement> 
<symbol> } </symbol> 
<subroutineDec> 
<keyword> method </keyword> 
<keyword> void </keyword> 
<identifier> moveLeft </identifier> 
<symbol> ( </symbol> 
<parameterList> 
</parameterList> 
<symbol> ) </symbol> 
<subroutineBody> 
<symbol> { </symbol> 
<statements> 
<ifStatement> 
<keyword> if </keyword> 
<symbol> ( </symbol> 
<expression> 
</expression> 
<identifier> x </identifier> 
<symbol> &gt; </symbol> 
<statements> 
</statements> 
<integerConstant> 1 </integerConstant> 
</ifStatement> 
</statements> 
<symbol> ) </symbol> 
</subroutineBody> 
</subroutineDec> 
<symbol> { </symbol> 
<doStatement> 
<keyword> do </keyword> 
<identifier> Screen </identifier> 
<symbol> . </symbol> 
<identifier> setColor </identifier> 
<symbol> ( </symbol> 
<expressionList> 
<expression> 
</expression> 
<keyword> false </keyword> 
<expression> 
</expression> 
</expressionList> 
<symbol> ) </symbol> 
<symbol> ; </symbol> 
</doStatement> 
<doStatement> 
<keyword> do </keyword> 
<identifier> Screen </identifier> 
<symbol> . </symbol> 
<identifier> drawRectangle </identifier> 
<symbol> ( </symbol> 
<expressionList> 
<expression> 
<symbol> ( </symbol> 
<expression> 
</expression> 
</expression> 
<identifier> x </identifier> 
<expression> 
<symbol> + </symbol> 
</expression> 
<identifier> size </identifier> 
<expression> 
</expression> 
</expressionList> 
<symbol> ) </symbol> 
<symbol> - </symbol> 
</doStatement> 
<integerConstant> 1 </integerConstant> 
<symbol> , </symbol> 
<identifier> y </identifier> 
<symbol> , </symbol> 
<identifier> x </identifier> 
<symbol> + </symbol> 
<identifier> size </identifier> 
<symbol> , </symbol> 
<identifier> y </identifier> 
<symbol> + </symbol> 
<identifier> size </identifier> 
<symbol> ) </symbol> 
<symbol> ; </symbol> 
<letStatement> 
<keyword> let </keyword> 
<identifier> x </identifier> 
<symbol> = </symbol> 
<expression> 
</expression> 
<identifier> x </identifier> 
</letStatement> 
<symbol> - </symbol> 
<integerConstant> 2 </integerConstant> 
<symbol> ; </symbol> 
<doStatement> 
<keyword> do </keyword> 
<identifier> Screen </identifier> 
<symbol> . </symbol> 
<identifier> setColor </identifier> 
<symbol> ( </symbol> 
<expressionList> 
<expression> 
</expression> 
<keyword> true </keyword> 
<expression> 
</expression> 
</expressionList> 
<symbol> ) </symbol> 
<symbol> ; </symbol> 
</doStatement> 
<doStatement> 
<keyword> do </keyword> 
<identifier> Screen </identifier> 
<symbol> . </symbol> 
<identifier> drawRectangle </identifier> 
<symbol> ( </symbol> 
<expressionList> 
<expression> 
</expression> 
<identifier> x </identifier> 
<expression> 
</expression> 
<symbol> , </symbol> 
<expression> 
</expression> 
<identifier> y </identifier> 
<expression> 
</expression> 
<symbol> , </symbol> 
<expression> 
</expression> 
<identifier> x </identifier> 
<expression> 
<symbol> + </symbol> 
</expression> 
<integerConstant> 1 </integerConstant> 
<expression> 
</expression> 
<symbol> , </symbol> 
<expression> 
</expression> 
<identifier> y </identifier> 
<expression> 
<symbol> + </symbol> 
</expression> 
<identifier> size </identifier> 
<expression> 
</expression> 
</expressionList> 
<symbol> ) </symbol> 
<symbol> ; </symbol> 
</doStatement> 
<symbol> } </symbol> 
<returnStatement> 
<keyword> return </keyword> 
<symbol> ; </symbol> 
</returnStatement> 
<symbol> } </symbol> 
<subroutineDec> 
<keyword> method </keyword> 
<keyword> void </keyword> 
<identifier> moveRight </identifier> 
<symbol> ( </symbol> 
<parameterList> 
</parameterList> 
<symbol> ) </symbol> 
<subroutineBody> 
<symbol> { </symbol> 
<statements> 
<ifStatement> 
<keyword> if </keyword> 
<symbol> ( </symbol> 
<expression> 
<symbol> ( </symbol> 
<expression> 
</expression> 
</expression> 
<identifier> x </identifier> 
<symbol> + </symbol> 
<statements> 
</statements> 
<identifier> size </identifier> 
</ifStatement> 
</statements> 
<symbol> ) </symbol> 
</subroutineBody> 
</subroutineDec> 
<symbol> &lt; </symbol> 
<integerConstant> 510 </integerConstant> 
<symbol> ) </symbol> 
<symbol> { </symbol> 
<doStatement> 
<keyword> do </keyword> 
<identifier> Screen </identifier> 
<symbol> . </symbol> 
<identifier> setColor </identifier> 
<symbol> ( </symbol> 
<expressionList> 
<expression> 
</expression> 
<keyword> false </keyword> 
<expression> 
</expression> 
</expressionList> 
<symbol> ) </symbol> 
<symbol> ; </symbol> 
</doStatement> 
<doStatement> 
<keyword> do </keyword> 
<identifier> Screen </identifier> 
<symbol> . </symbol> 
<identifier> drawRectangle </identifier> 
<symbol> ( </symbol> 
<expressionList> 
<expression> 
</expression> 
<identifier> x </identifier> 
<expression> 
</expression> 
<symbol> , </symbol> 
<expression> 
</expression> 
<identifier> y </identifier> 
<expression> 
</expression> 
<symbol> , </symbol> 
<expression> 
</expression> 
<identifier> x </identifier> 
<expression> 
<symbol> + </symbol> 
</expression> 
<integerConstant> 1 </integerConstant> 
<expression> 
</expression> 
<symbol> , </symbol> 
<expression> 
</expression> 
<identifier> y </identifier> 
<expression> 
<symbol> + </symbol> 
</expression> 
<identifier> size </identifier> 
<expression> 
</expression> 
</expressionList> 
<symbol> ) </symbol> 
<symbol> ; </symbol> 
</doStatement> 
<letStatement> 
<keyword> let </keyword> 
<identifier> x </identifier> 
<symbol> = </symbol> 
<expression> 
</expression> 
<identifier> x </identifier> 
</letStatement> 
<symbol> + </symbol> 
<integerConstant> 2 </integerConstant> 
<symbol> ; </symbol> 
<doStatement> 
<keyword> do </keyword> 
<identifier> Screen </identifier> 
<symbol> . </symbol> 
<identifier> setColor </identifier> 
<symbol> ( </symbol> 
<expressionList> 
<expression> 
</expression> 
<keyword> true </keyword> 
<expression> 
</expression> 
</expressionList> 
<symbol> ) </symbol> 
<symbol> ; </symbol> 
</doStatement> 
<doStatement> 
<keyword> do </keyword> 
<identifier> Screen </identifier> 
<symbol> . </symbol> 
<identifier> drawRectangle </identifier> 
<symbol> ( </symbol> 
<expressionList> 
<expression> 
<symbol> ( </symbol> 
<expression> 
</expression> 
</expression> 
<identifier> x </identifier> 
<expression> 
<symbol> + </symbol> 
</expression> 
<identifier> size </identifier> 
<expression> 
</expression> 
</expressionList> 
<symbol> ) </symbol> 
<symbol> - </symbol> 
</doStatement> 
<integerConstant> 1 </integerConstant> 
<symbol> , </symbol> 
<identifier> y </identifier> 
<symbol> , </symbol> 
<identifier> x </identifier> 
<symbol> + </symbol> 
<identifier> size </identifier> 
<symbol> , </symbol> 
<identifier> y </identifier> 
<symbol> + </symbol> 
<identifier> size </identifier> 
<symbol> ) </symbol> 
<symbol> ; </symbol> 
<symbol> } </symbol> 
<returnStatement> 
<keyword> return </keyword> 
<symbol> ; </symbol> 
</returnStatement> 
<symbol> } </symbol> 
<symbol> } </symbol> 
</class> 
